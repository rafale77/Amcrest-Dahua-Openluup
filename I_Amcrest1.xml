<?xml version="1.0"?>
<implementation>
<handleChildren>1</handleChildren>
<functions>
		local http_digest = require "http-digest"
		local CAM_SID = "urn:micasaverde-com:serviceId:Camera1"
		local HAD_SID = "urn:micasaverde-com:serviceId:HaDevice1"
		local SES_SID = "urn:micasaverde-com:serviceId:SecuritySensor1"

		function getSetVariable(serviceId, name, deviceId, default)
			local curValue = luup.variable_get(serviceId, name, deviceId)
			if (curValue == nil) then
				curValue = default
				luup.variable_set(serviceId, name, curValue, deviceId)
			end
			return curValue
		end
	
		function cmdsend(code, func, arg)
		local url = ("http://" ..luup.devices[lul_device].user.. ":" ..luup.devices[lul_device].pass.. "@" ..luup.devices[lul_device].ip.. "/cgi-bin/" ..func.. ".cgi?action=start&channel=0&code=".. code .. "&arg1=0&arg2=" .. arg .. "&arg3=0")
		local b, c, h = http_digest.request(url)
		end
		
		function snapcmd()
		url = ("http://" ..luup.devices[lul_device].user.. ":" ..luup.devices[lul_device].pass.."@" ..luup.devices[lul_device].ip.. "/cgi-bin/snapshot.cgi")
		local b, c, h = http_digest.request(url)
		end

		function stopPanTiltZoom()
		local url = ("http://" ..luup.devices[lul_device].user.. ":" ..luup.devices[lul_device].pass.. "@" ..luup.devices[lul_device].ip.. "/cgi-bin/ptz.cgi?action=stop&channel=0&code=Up&arg1=0&arg2=0&arg3=0")
		local b, c, h = http_digest.request(url)
		end

		--Enable motion and audio detect (true/false)
		function DetectionEnable(action)
			url = ("http://" ..luup.devices[lul_device].user.. ":" ..luup.devices[lul_device].pass.. "@" ..luup.devices[lul_device].ip.. "/cgi-bin/configManager.cgi?action=setConfig&amp;MotionDetect[0].Enable=" .. action)
		local b, c, h = http_digest.request(url)
			url = ("http://" ..luup.devices[lul_device].user.. ":" ..luup.devices[lul_device].pass.. "@" ..luup.devices[lul_device].ip.. "/cgi-bin/configManager.cgi?action=setConfig&amp;AudioDetect[0].AnomalyDetect.Enable=" .. action .. "&amp;AudioDetect[0].MutationDetect=" .. action)
		local b, c, h = http_digest.request(url)
		end

		function init(lul_device)
		
			luup_devices = lul_device

			luup.set_failure(false)

		-- Check if we have the correct category number.
			if (luup.devices[lul_device].category_num ~= 6) then
				luup.attr_set("category_num", "6", lul_device)
			end
			
		-- Get username, password and IP
			luup.devices[lul_device].user = getSetVariable(CAM_SID, "Username", lul_device, "Set your username here")
			luup.devices[lul_device].pass = getSetVariable(CAM_SID, "Password", lul_device, "Set your password here")
		-- Set default snapshot URL	
		--	luup.variable_set(CAM_SID, "URL", "/cgi-bin/snapshot.cgi", lul_device)
		-- Set Direct Streaming URL for ALTUI
			luup.variable_set(CAM_SID, "DirectStreamingURL","/cgi-bin/mjpg/video.cgi?[channel=1]&subtype=1", lul_device)		



		-- Set supported camera features (pan/tilt/zoom/presets) and update the 'Commands' variable with the available commands.
			local commands = "camera_full_screen,camera_left,camera_right,camera_up,camera_down,camera_preset,camera_zoom_in,camera_zoom_out"

		luup.variable_set("urn:micasaverde-com:serviceId:HaDevice1", "Commands", commands, lul_device)
		
		local stepSize = luup.variable_get(CAM_SID, "StepSize", lul_device) or ""
		if (stepSize == "") then
			stepSize = "1"
			luup.variable_set(CAM_SID, "StepSize", stepSize, lul_device)
		end
			
		local reverseControls = luup.variable_get(CAM_SID, "ReverseControls", lul_device) or ""
		if (reverseControls == "") then
			reverseControls = "0"
			luup.variable_set(CAM_SID, "ReverseControls", reverseControls, lul_device)
		end		
	end
</functions>
  
	<startup>init</startup>
	<actionList>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:PanTiltZoom1</serviceId>
			<name>MoveLeft</name>
			<job>
				cmdsend("Left","ptz","1")
				luup.call_delay("stopPanTiltZoom", stepSize)
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:PanTiltZoom1</serviceId>
			<name>MoveRight</name>
			<job>
				cmdsend("Right","ptz","1")
				luup.call_delay("stopPanTiltZoom", stepSize)
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:PanTiltZoom1</serviceId>
			<name>MoveUp</name>
			<job>
				cmdsend("Up","ptz","1")
				luup.call_delay("stopPanTiltZoom", stepSize)
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:PanTiltZoom1</serviceId>
			<name>MoveDown</name>
			<job>
				cmdsend("Down","ptz","1")
				luup.call_delay("stopPanTiltZoom", stepSize)
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:PanTiltZoom1</serviceId>
			<name>GoToPreset</name>
			<job>
				cmdsend("GotoPreset","ptz",lul_settings.presetNumber) 
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:PanTiltZoom1</serviceId>
			<name>ZoomOut</name>
			<job>
				cmdsend("ZoomWide","ptz","0")
				luup.call_delay("stopPanTiltZoom", 1)
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:PanTiltZoom1</serviceId>
			<name>ZoomIn</name>
			<job>
				cmdsend("ZoomTele","ptz","0")
				luup.call_delay("stopPanTiltZoom", 1)
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:Camera1</serviceId>
			<name>SetPassword</name>
			<job>
			luup.variable_set(CAM_SID, "Username", lul_settings.username, lul_device)
			luup.variable_set(CAM_SID, "Password", lul_settings.password, lul_device)

			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:Camera1</serviceId>
			<name>ArchiveVideo</name>
			<job>
			snapcmd()
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:SecuritySensor1</serviceId>
			<name>SetArmed</name>
			<run>
				luup.variable_set(SES_SID, "Armed", lul_settings.newArmedValue, lul_device)
				local SensorState = luup.variable_get(SES_SID, "Armed", lul_device)
				if tonumber(SensorState) == 1 then -- set armed, enable motion and audio detection in camera
					DetectionEnable("true")
					luup.log("Camera Motion Sensor ip: " ..luup.devices[lul_device].ip.. " (".. luup.devices[lul_device].description .."::State=".. SensorState ..") Motion sensor armed")

				else -- set unarmed, disable motion and audio detection in camera
					DetectionEnable("false")
					luup.log("Camera Motion Sensor ip: " ..luup.devices[lul_device].ip.. " (".. luup.devices[lul_device].description .."::State=".. SensorState ..") Motion sensor disarmed")		
				end

				--return success (4), or later after check, failure (2)
				return 4
			</run>
		</action>
	</actionList>
</implementation>

