<?xml version="1.0" encoding="UTF-8"?>
<implementation>
		<files>L_Amcrest.lua</files>
		<handleChildren>1</handleChildren>
		<startup>init</startup>
		<actionList>
			<action>
				<serviceId>urn:micasaverde-com:serviceId:PanTiltZoom1</serviceId>
				<name>MoveLeft</name>
				<job>
					cmdsend("Left","ptz","1")
					luup.call_delay("stopPanTiltZoom", tonumber(stepSize))
				</job>
			</action>
			<action>
				<serviceId>urn:micasaverde-com:serviceId:PanTiltZoom1</serviceId>
				<name>MoveRight</name>
				<job>
					cmdsend("Right","ptz","1")
					luup.call_delay("stopPanTiltZoom", tonumber(stepSize))
				</job>
			</action>
			<action>
				<serviceId>urn:micasaverde-com:serviceId:PanTiltZoom1</serviceId>
				<name>MoveUp</name>
				<job>
					cmdsend("Up","ptz","1")
					luup.call_delay("stopPanTiltZoom", tonumber(stepSize))
				</job>
			</action>
			<action>
				<serviceId>urn:micasaverde-com:serviceId:PanTiltZoom1</serviceId>
				<name>MoveDown</name>
				<job>
					cmdsend("Down","ptz","1")
					luup.call_delay("stopPanTiltZoom", tonumber(stepSize))
				</job>
			</action>
			<action>
				<serviceId>urn:micasaverde-com:serviceId:PanTiltZoom1</serviceId>
				<name>GoToPreset</name>
				<job>
					cmdsend("GotoPreset","ptz",lul_settings.presetNumber)
				</job>
			</action>

			<action>
				<serviceId>urn:micasaverde-com:serviceId:PanTiltZoom1</serviceId>
				<name>HorizontalPatrol</name>
				<job>
					cmdsend("AutoPanOn","ptz",0)
				</job>
			</action>
			<action>
				<serviceId>urn:micasaverde-com:serviceId:PanTiltZoom1</serviceId>
				<name>VerticalPatrol</name>
				<job>
					cmdsend("AutoScanOn","ptz",0)
				</job>
			</action>
			<action>
				<serviceId>urn:micasaverde-com:serviceId:PanTiltZoom1</serviceId>
				<name>StopPatrol</name>
				<job>
					cmdsend("AutoPanOff","ptz",0)
					cmdsend("AutoScanOff","ptz",0)
					stopPanTiltZoom()
				</job>
			</action>

		<action>
			<serviceId>urn:micasaverde-com:serviceId:PanTiltZoom1</serviceId>
			<name>ZoomOut</name>
			<job>
				cmdsend("ZoomWide","ptz","0")
				luup.call_delay("stopPanTiltZoom", 1)
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:PanTiltZoom1</serviceId>
			<name>ZoomIn</name>
			<job>
				cmdsend("ZoomTele","ptz","0")
				luup.call_delay("stopPanTiltZoom", 1)
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:Camera1</serviceId>
			<name>SetPassword</name>
			<job>
			luup.variable_set(CAM_SID, "Username", lul_settings.username, lul_device)
			luup.variable_set(CAM_SID, "Password", lul_settings.password, lul_device)

			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:Camera1</serviceId>
			<name>ArchiveVideo</name>
			<job>
				snapcmd()
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:SecuritySensor1</serviceId>
			<name>SetArmed</name>
			<run>
				luup.variable_set(SES_SID, "Armed", lul_settings.newArmedValue, lul_device)
				local SensorState = luup.variable_get(SES_SID, "Armed", lul_device)
				if tonumber(SensorState) == 1 then -- set armed, enable motion and audio detection in camera
					DetectionEnable("true")
					luup.log("Camera Motion Sensor ip: " ..luup.devices[lul_device].ip.. " (".. luup.devices[lul_device].description .."::State=".. SensorState ..") Motion sensor armed")
				else -- set unarmed, disable motion and audio detection in camera
					DetectionEnable("false")
					luup.log("Camera Motion Sensor ip: " ..luup.devices[lul_device].ip.. " (".. luup.devices[lul_device].description .."::State=".. SensorState ..") Motion sensor disarmed")
				end

				--return success (4), or later after check, failure (2)
				return 4
			</run>
		</action>
	</actionList>
</implementation>
